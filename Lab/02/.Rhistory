knitr::opts_chunk$set(echo = TRUE)
setwd("D:/UMich/Fall23/EAS648/Repo/Lab/02")
# Requiring the library
## Dependencies
library(sf)
library(raster)
library(terra)
library(raster)
library(tmap)
library(tmaptools)
library(lidR)
#library(RStoolbox)
library(ForestTools)
library(ggplot2)
library(gstat)
library(leaflet)
library(tmap)
# loading the data
lidar_index <- st_read("Data/tileindex_2020/dc2020_dc_index.shp")
lidar_index <- st_transform(lidar_index, 4326)
# showing the index layer
leaflet(lidar_index) %>%
addTiles() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.05,
fillColor =NA,
highlightOptions = highlightOptions(color = "blue", weight = 2,
bringToFront = TRUE),
popup = paste("LiDAR Index: ", lidar_index$Index))
las_index_tile = lidar_index[lidar_index$Index == 89, ]
leaflet(las_index_tile)%>%
addTiles() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor ="green",
highlightOptions = highlightOptions(color = "blue", weight = 2,
bringToFront = TRUE),
popup = paste("Research Tile Index: ", las_index_tile$Index))
# load laz file
las_2020 = readLAS("Data/20200630_1219.laz")
las_2022 = readLAS("Data/20220124_1219.copc.laz")
# No need to set coordinate reference systems (CRS)
# EPSG code is provided in the metadata: 4269
# CRS("+init=epsg:4269")
# epsg(las_2020) = 4269
summary(las_2020)
summary(las_2022)
epsg_nad83_utm17n <- 26917
temp_las = las_2020@data
temp_coords <- as.data.frame(temp_las)
temp_coords <- st_as_sf(temp_coords, coords = c("X", "Y"), crs = 4269)
# Transform
coords_utm <- st_transform(temp_coords, crs = epsg_nad83_utm17n)
# coords_utm <- as.data.frame(coords_utm)
xy_coords <- st_coordinates(coords_utm)
head(xy_coords)
# rewrite the x and y column in las data
las_2020@data$X <- xy_coords$X
View(coords_utm)
# rewrite the x and y column in las data
las_2020@data$X <- xy_coords[ , "X"]
las_2020@data$Y <- xy_coords[, "Y"]
head(las_2020@data)
temp_las = las_2022@data
temp_coords <- as.data.frame(temp_las)
temp_coords <- st_as_sf(temp_coords, coords = c("X", "Y"), crs = 4269)
# Transform
coords_utm <- st_transform(temp_coords, crs = epsg_nad83_utm17n)
# coords_utm <- as.data.frame(coords_utm)
xy_coords <- st_coordinates(coords_utm)
head(xy_coords)
# overwrite the x and y column in las data
las_2022@data$X <- xy_coords[ ,"X"]
las_2022@data$Y <- xy_coords[,"Y"]
View(las_2022)
head(las_2022@data)
# remove the unused variables
rm(temp_coords, temp_las, xy_coords, coords_utm)
ls()
head(las_2022@data)
# remove the unused variables
rm(temp_coords, temp_las, xy_coords, coords_utm)
ls()
# Interpolation with kriging
dtm_2020 = grid_terrain(las_2020, res = 16.4042, algorithm = kriging(k = 40))
# Interpolation with kriging
dtm_2020 = grid_terrain(las_2020, res = 16.4042, algorithm = kriging(k = 30))
# Interpolation with kriging
dtm_2020 = grid_terrain(las_2020, res = 5, algorithm = kriging(k = 30))
# Interpolation with kriging
dtm_2020 = grid_terrain(las, res = 1, knnidw(k = 6, p = 2), keep_lowest = FALSE)
# Interpolation with kriging
dtm_2020 = grid_terrain(las_2020, res = 1, knnidw(k = 6, p = 2), keep_lowest = FALSE)
# Interpolation with kriging
dtm_2020 = grid_terrain(las, res = 3, algorithm = tin())
# Interpolation with kriging
dtm_2020 = grid_terrain(las_2020, res = 3, algorithm = tin())
dtm_2022 = grid_terrain(las_2022, res = 16.4042, algorithm = kriging(k = 40))
water_2020 = filter_poi(las_2020, Classification == 9L)
water_2022 = filter_poi(las_2022, Classification == 9L)
head(water_2020)
head(water_2020@data)
# Interpolation with kriging
dtm_2020 = grid_terrain(water_2020, res = 3, algorithm = tin())
# load laz file
las_2020 = readLAS("Data/20200630_1219.laz")
las_2022 = readLAS("Data/20220124_1219.copc.laz")
# No need to set coordinate reference systems (CRS)
# EPSG code is provided in the metadata: 4269
# CRS("+init=epsg:4269")
# epsg(las_2020) = 4269
summary(las_2020)
water_2020 = filter_poi(las_2020, Classification == 9L)
water_2022 = filter_poi(las_2022, Classification == 9L)
# Interpolation with kriging
dtm_2020 = grid_terrain(water_2020, res = 3, algorithm = tin())
dtm_2022 = grid_terrain(water_2022, res = 16.4042, algorithm = kriging(k = 40))
dtm_2022 = grid_terrain(water_2022, res = 3, algorithm = tin())
## plot 2d
# subplot the two model side by side
tm_shape(dtm_2020)+
tm_raster(style= "cont", palette=get_brewer_pal("Greys", plot=FALSE))+
tm_layout(legend.outside = TRUE)
View(dtm_2020)
dtm_2020@data
## plot 2d
plot(dtm_2020)
## plot 2d
ggplot(dtm_2020) +
geom_histogram(aes(Z)) +
xlab("DTM Elevation Value (m)") +
ggtitle("Distribution of DTM Values")
# Interpolation with TIN
dtm_2020 = grid_terrain(water_2020, res = 3, algorithm = tin())
## plot 2d
ggplot(dtm_2020) +
geom_histogram(aes(Z)) +
xlab("DTM Elevation Value (m)") +
ggtitle("Distribution of DTM Values")
## plot 2d
dtm_2020_df = as.data.frame(dtm_2020)
ggplot(dtm_2020_df) +
geom_histogram(aes(Z)) +
xlab("DTM Elevation Value (m)") +
ggtitle("Distribution of DTM Values")
View(water_2020)
View(dtm_2020)
dtm_2020@data
# Interpolation with TIN
dtm_2020 = grid_terrain(water_2020, res = 1, knnidw(k = 6, p = 2), keep_lowest = FALSE)
View(dtm_2020)
View(water_2020)
View(dtm_2020)
dtm_2020@file
dtm_2020
summary(dtm_2020)
sum = summary(dtm_2020)
View(water_2020)
View(water_2020@data)
# Interpolation with TIN
st_coordinates(water_2020)
# Interpolation with TIN
sum = st_coordinates(water_2020)
View(sum)
View(water_2020)
water_2020@crs
water_2020@index
water_2020@header
plot(water_2020)
plot(water_2022)
water_2020 = filter_poi(las_2020, Classification == 9L)
water_2022 = filter_poi(las_2022, Classification == 9L)
head(water_2020@data)
View(las_2020)
las_2020@index
# Interpolation with TIN
dtm_2020 = grid_terrain(water_2020, algorithm = knnidw(k = 10L, p = 2))
View(dtm_2020)
dtm_2020@data
head(dtm_2020@data)
print(dtm_2020@data)
View(dtm_2020@data)
View(dtm_2020@data)
View(dtm_2020)
